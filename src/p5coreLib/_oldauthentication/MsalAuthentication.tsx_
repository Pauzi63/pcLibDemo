import React, { useEffect } from "react";
import globals from "../../p5Lib/globals";

import {
  AzureAD,
  IAzureADFunctionProps,
  AuthenticationState,
} from "react-aad-msal";
import { JwtAuthentication } from "./JwtAuthentication";
import { AuthProvider } from "./MsalAuthProvider";

import ErrorPage from "../commonPages/ErrorPage";
import LoadingPage from "../commonPages/LoadingPage";
import BlankPage from "../commonPages/BlankPage";
import axios from "axios";
import { setToken } from "./tokenstorage";

const MsalAuthentication = (props: { children: any }) => {
  const { children } = props;
  const [isAuthenticated, setIsAuthenticated] = React.useState<
    boolean | undefined
  >(globals.krmCoreLogin === true ? undefined : true);
  const [aadError, setAadError] = React.useState();

  async function loginToKrmCore(loginName: string, password: string) {
    // const jwtAuthentication = new JwtAuthentication();
    // return await jwtAuthentication
    //   .authenticate(loginName, password)
    //   .then(() => {
    //     return jwtAuthentication.token;
    //   })
    //   .then(() => {
    //     setIsAuthenticated(true);
    //   })
    //   .catch((reject) => {
    //     setIsAuthenticated(false);
    //     setAadError(reject.err);
    //   });
    await axios
      .post(
        `${process.env.REACT_APP_API_URL}/Authentication`,
        JSON.stringify({
          networkId: loginName,
          application: globals.appName,
        }),
        {
          headers: {
            "Content-Type": "application/json; charset=utf-8",
          },
        }
      )
      .then((response) => {
        setToken(response.data.token);
        setIsAuthenticated(true);
      })
      .catch(() => {
        setIsAuthenticated(false);
      });
  }

  // const timeout = useEffect(() => {
  //   return () => clearTimeout(setTimeout(() => {}, 2000));
  // }, []);

  React.useEffect(() => {
    console.log("isAuthenticated: ", { isAuthenticated });
  }, [isAuthenticated]);

  return (
    <AzureAD provider={AuthProvider} forceLogin={true}>
      {({ accountInfo, authenticationState, error }: IAzureADFunctionProps) => {
        if (
          authenticationState === AuthenticationState.Authenticated &&
          isAuthenticated === undefined
        ) {
          loginToKrmCore(accountInfo?.account.userName ?? "", "");
        }
        return (
          <React.Fragment>
            {authenticationState === AuthenticationState.Unauthenticated && (
              <LoadingPage />
            )}
            {authenticationState === AuthenticationState.InProgress && (
              <LoadingPage />
            )}
            {authenticationState === AuthenticationState.Authenticated &&
              isAuthenticated === true && <div>{children}</div>}
            {authenticationState === AuthenticationState.Authenticated &&
              isAuthenticated === undefined && <LoadingPage />}
            {authenticationState === AuthenticationState.Authenticated &&
              isAuthenticated === false && (
                <ErrorPage code="KrmCore Error" message={aadError} />
              )}
            {error && (
              <ErrorPage code={error.errorCode} message={error.errorMessage} />
            )}
          </React.Fragment>
        );
      }}
    </AzureAD>
  );
};

export default MsalAuthentication;
